import tkinter as tk
from tkinter import scrolledtext, messagebox
from googletrans import Translator
from gtts import gTTS
import pygame
import os
from nltk.tokenize import sent_tokenize
import nltk
import speech_recognition as sr
from threading import Thread
from time import sleep
nltk.download('punkt')
languages = {
    "English": "en",
    "Bengali": "bn",
    "Hindi": "hi",
    "Spanish": "es",
    "French": "fr",
    "German": "de",
    "Chinese": "zh-cn",
    "Japanese": "ja",
    "Gujarati": "gu",
    "Marathi": "mr",
    "Tamil": "ta",
    "Telugu": "te",
    "Kannada": "kn",
    "Punjabi": "pa",
}
translator = Translator()
stop_animation_flag = False
def stop_animation():
    global stop_animation_flag
    stop_animation_flag = True


def voice_input():
    def record():
        recognizer = sr.Recognizer()
        input_lang_code = languages[input_language_var.get()]

        try:
            with sr.Microphone() as source:
                animate_label(status_label, "Listening...")
                recognizer.adjust_for_ambient_noise(source, duration=1)
                audio = recognizer.listen(source, timeout=10, phrase_time_limit=15)
                stop_animation()

                try:
                    input_text = recognizer.recognize_google(audio, language=input_lang_code)
                    text_input.delete("1.0", tk.END)
                    text_input.insert(tk.END, input_text)
                except sr.UnknownValueError:
                    stop_animation()
                    messagebox.showerror("Voice Input Error", "Could not understand your speech. Please try again.")
                except sr.RequestError as e:
                    stop_animation()
                    messagebox.showerror("Voice Input Error", f"Service unavailable. Error: {e}")
        except sr.WaitTimeoutError:
            stop_animation()
            messagebox.showerror("Voice Input Error", "Listening timed out. Please speak louder or closer to the microphone.")
        except Exception as e:
            stop_animation()
            messagebox.showerror("Voice Input Error", f"An unexpected error occurred: {e}")

    Thread(target=record).start()


def animate_label(label, action_text):
    global stop_animation_flag
    stop_animation_flag = False
    colors = ["#F4D03F", "#F39C12", "#E67E22"]

    def pulse():
        while not stop_animation_flag:
            for color in colors:
                if stop_animation_flag:
                    break
                label.config(text=action_text, fg=color)
                root.update()
                sleep(0.3)
        label.config(text="")

    Thread(target=pulse).start()


def speak_text(text, lang_code):
    def playback():
        try:
            pygame.mixer.init()
            animate_label(status_label, "Speaking...")
            tts = gTTS(text=text, lang=lang_code)
            audio_file = "output.mp3"
            tts.save(audio_file)

            pygame.mixer.music.load(audio_file)
            pygame.mixer.music.play()

            while pygame.mixer.music.get_busy():
                root.update()

            pygame.mixer.quit()
            os.remove(audio_file)
            stop_animation()
        except Exception as e:
            stop_animation()
            messagebox.showerror("TTS Error", f"Error generating speech: {e}")

    Thread(target=playback).start()


def summarize_text():
    input_text = text_input.get("1.0", tk.END).strip()
    if not input_text:
        messagebox.showinfo("Input Error", "Please enter text to summarize.")
        return

    input_lang = languages[input_language_var.get()]
    output_lang = languages[output_language_var.get()]

    if input_language_var.get() != "English":
        try:
            input_text = translator.translate(input_text, src=input_lang, dest="en").text
        except Exception as e:
            messagebox.showerror("Translation Error", f"Error translating input text: {e}")
            return

    sentences = sent_tokenize(input_text)
    summary = input_text if len(sentences) <= 5 else " ".join([sentences[0], sentences[len(sentences) // 2], sentences[-1]])

    if output_language_var.get() != "English":
        try:
            summary = translator.translate(summary, src="en", dest=output_lang).text
        except Exception as e:
            messagebox.showerror("Translation Error", f"Error translating summary: {e}")
            return

    text_output.delete("1.0", tk.END)
    text_output.insert(tk.END, summary)


def clear_screen():
    for widget in root.winfo_children():
        widget.destroy()

def show_intro_page():
    clear_screen()
    intro_page()

def show_language_page():
    clear_screen()
    language_page()

def show_main_page():
    clear_screen()
    main_page()


def intro_page():
    header = tk.Label(root, text="UnDoc", font=("Helvetica", 50, "bold"), bg="#1C2833", fg="#F4D03F")
    header.pack(pady=100)

    start_button = tk.Button(
        root, text="Get Started", font=("Helvetica", 16), bg="#28B463", fg="white", command=show_language_page
    )
    start_button.pack(pady=20)


def language_page():
    header = tk.Label(root, text="Select Languages", font=("Helvetica", 30, "bold"), bg="#1C2833", fg="#F4D03F")
    header.pack(pady=50)

    frame = tk.Frame(root, bg="#1C2833")
    frame.pack(pady=20)

    tk.Label(frame, text="Input Language:", font=("Helvetica", 14), bg="#1C2833", fg="#ECF0F1").grid(row=0, column=0, padx=10)
    tk.OptionMenu(frame, input_language_var, *languages.keys()).grid(row=0, column=1)

    tk.Label(frame, text="Output Language:", font=("Helvetica", 14), bg="#1C2833", fg="#ECF0F1").grid(row=1, column=0, padx=10)
    tk.OptionMenu(frame, output_language_var, *languages.keys()).grid(row=1, column=1)

    next_button = tk.Button(
        root, text="Next", font=("Helvetica", 16), bg="#28B463", fg="white", command=show_main_page
    )
    next_button.pack(pady=30)


def main_page():
    global status_label, text_input, text_output

    header = tk.Label(root, text="UnDoc Text Summarizer", font=("Helvetica", 30, "bold"), bg="#1C2833", fg="#F4D03F")
    header.pack(pady=20)
    header = tk.Label(root, text="By Dwaipayan Das", font=("Helvetica", 20, "bold"), bg="#1C2833", fg="white")
    header.pack(pady=1)

    frame_input = tk.Frame(root, bg="#1C2833")
    frame_input.pack(padx=40, pady=15, fill=tk.BOTH)

    text_input = scrolledtext.ScrolledText(
        frame_input, wrap=tk.WORD, width=85, height=10, font=("Verdana", 12), bg="#34495E", fg="#ECF0F1", insertbackground="#ECF0F1"
    )
    text_input.pack(pady=10)

    tk.Button(
        frame_input, text="ðŸŽ™ Voice Input", font=("Helvetica", 14), bg="#5DADE2", fg="white", command=voice_input
    ).pack(pady=1)

    tk.Button(
        root, text="Summarize", font=("Helvetica", 16, "bold"), bg="#28B463", fg="white", command=summarize_text
    ).pack(pady=1)

    frame_output = tk.Frame(root, bg="#1C2833")
    frame_output.pack(padx=40, pady=15, fill=tk.BOTH, expand=True)

    text_output = scrolledtext.ScrolledText(
        frame_output, wrap=tk.WORD, width=85, height=10, font=("Verdana", 12), bg="#34495E", fg="#ECF0F1", insertbackground="#ECF0F1"
    )
    text_output.pack(pady=1)

    tk.Button(
        frame_output, text="ðŸ”Š Speak Output", font=("Helvetica", 14), bg="#5DADE2", fg="white", command=lambda: speak_text(
            text_output.get("1.0", tk.END).strip(), languages[output_language_var.get()]
        )
    ).pack(pady=5)

    tk.Button(
        root, text="Back", font=("Helvetica", 14), bg="#E74C3C", fg="white", command=show_language_page
    ).pack(pady=1)

    status_label = tk.Label(root, text="", font=("Helvetica", 14), bg="#1C2833", fg="#F4D03F")
    status_label.pack(pady=1)


root = tk.Tk()
root.title("UnDoc - Text Summarizer")
root.geometry("950x650")
root.configure(bg="#1C2833")

input_language_var = tk.StringVar(value="English")
output_language_var = tk.StringVar(value="English")


show_intro_page()
root.mainloop()
